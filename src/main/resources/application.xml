<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- bean 的文件载入形式 
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	        <list>
	            <value>classpath:jdbc.properties</value>
	            <value>classpath:redis.properties</value>
	        </list>
	    </property>
	</bean>
	-->
	
	<context:property-placeholder file-encoding="UTF-8" 
		location="classpath*:jdbc.properties,classpath*:redis.properties" ignore-resource-not-found="true" />
	
	
	<context:component-scan base-package="com.longtop.*" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
   
   <!-- 配置dbcps数据连接池 -->
   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
     <property name="driverClassName" value="${driverClassName}"/>  
   		<property name="url" value="${url}"/>  
      	<property name="username" value="${username}"/>  
       	<property name="password" value="${password}"/>  
       	<!--maxActive: 最大连接数量-->  
       	<property name="maxActive" value="${maxActive}"/>  
       	<!--minIdle: 最小空闲连接-->  
       	<property name="minIdle" value="${minIdle}"/>  
      	<!--maxIdle: 最大空闲连接-->  
       	<property name="maxIdle" value="${maxIdle}"/>  
       	<!--initialSize: 初始化连接-->  
       	<property name="initialSize" value="${initialSize}"/>  
        <!--  连接被泄露时是否打印 -->  
       	<property name="logAbandoned" value="${logAbandoned}"/>  
     	<!--   removeAbandoned: 是否自动回收超时连接 -->  
       	<property name="removeAbandoned" value="${removeAbandoned}"/>  
      	<!--  removeAbandonedTimeout: 超时时间(以秒数为单位) -->  
       	<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>  
     	<!--   maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->  
       	<property name="maxWait" value="${maxWait}"/>  
     	<!--   在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
       	<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>  
      	<!--   在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
       	<property name="numTestsPerEvictionRun" value="${numTestsPerEvictionRun}"/>  
    	<!--    1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程 -->  
       	<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>  
       	<property name="validationQuery" value="${validationQuery}"/>  
      
    	<!-- 定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭 -->  
     	<!--  <property name="testWhileIdle" value="${testWhileIdle}"/>   -->  
    	<!-- 指定在从连接池中拿连接时，要检查连接是否有效，若无效会将连接从连接池中移除掉 -->  
     	<property name="testOnBorrow" value="${testOnBorrow}"/> 
    </bean>  
   
   
   <!-- myBatis session配置 
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="singleton">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
	</bean>
   -->
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/longtop/springmvc/dao/*.xml"></property>
        <!-- 开启缓存支持 -->
        <property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">true</prop>
                <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                <prop key="lazyLoadingEnabled">false</prop>
                <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
                <prop key="aggressiveLazyLoading">true</prop>
                <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
                <prop key="multipleResultSetsEnabled">true</prop>
                <!-- 允许使用列标签代替列名 -->
                <prop key="useColumnLabel">true</prop>
                <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
                <prop key="useGeneratedKeys">true</prop>
                <!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
                <prop key="autoMappingBehavior">FULL</prop>
                <!-- 对于批量更新操作缓存SQL以提高性能 -->
                <prop key="defaultExecutorType">BATCH</prop>
                <!-- 数据库超过25000秒仍未响应则超时 -->
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>
    </bean>
   
   <bean id="sqlMapClient" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
   
   
   <!-- 配置hibernate session工厂  
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>  
            </props>  
        </property>  
   -->
        <!-- 自动扫描注解方式配置的hibernate类文件   
        <property name="packagesToScan">  
            <list>  
                <value>com.jesus.sshframework.model</value>  
            </list>  
        </property>  
    </bean>  
  -->
    <!-- 配置事务管理器   
    <bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory"></property>  
    </bean>  
  -->
  	
  	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource"></property>
  	</bean>
  	
  	
    <!-- 注解方式配置事物 -->  
    <tx:annotation-driven transaction-manager="transactionManager" /> 
  
    <!-- 拦截器方式配置事物  
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="add*" />  
            <tx:method name="save*" />  
            <tx:method name="update*" />  
            <tx:method name="modify*" />  
            <tx:method name="edit*" />  
            <tx:method name="delete*" />  
            <tx:method name="remove*" />  
            <tx:method name="repair" />  
            <tx:method name="deleteAndRepair" />  
  
            <tx:method name="get*" propagation="SUPPORTS" />  
            <tx:method name="find*" propagation="SUPPORTS" />  
            <tx:method name="load*" propagation="SUPPORTS" />  
            <tx:method name="search*" propagation="SUPPORTS" />  
            <tx:method name="datagrid*" propagation="SUPPORTS" />  
  
            <tx:method name="*" propagation="SUPPORTS" />  
        </tx:attributes>  
    </tx:advice>  
    <aop:config>  
        <aop:pointcut id="transactionPointcut" expression="execution(* com.longtop.springmvc.service..*.*(..))" />  
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />  
    </aop:config>  
    -->
   
   <!-- redis缓存配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
    	 <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxActive" value="${redis.maxActive}" />  
        <property name="maxWait" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" /> 
    </bean>  
      
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    	<property name="hostName" value="${redis.host}" />
    	<property name="port" value="${redis.port}" />
    	<property name="password" value="${redis.pass}" />
    	<property name="poolConfig" ref="poolConfig" />
    </bean>  
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">   
        <property name="connectionFactory"   ref="connectionFactory" />   
        <property name="keySerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>      
        <property name="valueSerializer">   
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />   
        </property>   
        <property name="hashKeySerializer">     
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property>   
        <property name="hashValueSerializer">   
           <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>     
        </property> 
     </bean>          
      
</beans>
